solution {

    struct Node {
   	 Int data;
   	 Node left;
   	 Node right;

   	 Node (int data, Node left, Node right) {
   		 this.left = left;
   		 this.right = right;
   		 this.data = data;
   	 }
    }

    struct Pair {
   	 Node* node;
   	 int state;

   	 Pair(Node* node, int state) {
   		 this->node = node;
   		 this->state = state;
   	 }
    };


    int main() {
   	 int arr[] = {50, 25, 12, NULL, NULL, 37, 30, NULL, NULL};

   	 stack<Pair*> st;
   	 Node* root = new Node(50);
   	 st.push(new Pair(root, 0)); // 0 = left, 1 = right, 2 = OUT
   	 int index = 0;

   	 while(st.size() > 0) {
   		 Pair* p = st.top();
   		 if(p->state == 0) {
   			 st.pop();
   			 index++;
   			 if(arr[index] != NULL) {
   				 Node* newNode = new Node(arr[i], NULL, NULL);
   				 p->node->left = newNode;
   				 p->node->state++;
   				 st.push(p);
   				 st.push(new Pair(newNode, 0));
   			 } else {
   				 p->node->left = NULL;
   				 p->node->state++;
   				 st.push(p);
   			 }
   		 } else if (p-> state = 1) {
   			 st.pop();
   			 index++;
   			 if(arr[index] != NULL) {
   				 Node* newNode = new Node(arr[i], NULL, NULL);
   				 p->node->right = newNode;
   				 p->node->state++;
   				 st.push(p);
   				 st.push(new Pair(newNode, 0));
   			 } else {
   				 p->node->right = NULL;
   				 p->node->state++;
   				 st.push(p);
   			 }
   		 } else { // state = 2
				 st.pop();
   		 }
   	 }
    }
}
